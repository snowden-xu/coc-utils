{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig.json to read more about this file */

    /* 项目 */
    // "incremental": true,                              /* 启用增量编译。 */
    // "composite": true,                                /* 启用约束，使得 TypeScript 项目可以与项目引用一起使用。 */
    // "tsBuildInfoFile": "./",                          /* 指定用于存放 .tsbuildinfo 增量编译文件的文件夹。 */
    // "disableSourceOfProjectReferenceRedirect": true,  /* 禁用在引用复合项目时优先使用源文件而不是声明文件。 */
    // "disableSolutionSearching": true,                 /* 在编辑时取消多项目引用检查中的一个项目。 */
    // "disableReferencedProjectLoad": true,             /* 减少 TypeScript 自动加载的项目数量。 */

    /* 语言和环境 */
    "target": "es5",                                     /* 设置生成的JavaScript的JavaScript语言版本，并包含兼容的库声明。 */
    // "lib": [],                                        /* 指定一组捆绑的库声明文件，用于描述目标运行时环境。*/
    // "jsx": "preserve",                                /* 指定生成的 JSX 代码类型。 */
    // "experimentalDecorators": true,                   /* 启用对 TC39 阶段2草案装饰器的实验性支持。 */
    // "emitDecoratorMetadata": true,                    /* 在源文件中对装饰声明发出设计类型元数据。*/
    // "jsxFactory": "",                                 /* 指定在目标为 React JSX 时使用的 JSX 工厂函数，例如 'React.createElement' 或 'h'。 */
    // "jsxFragmentFactory": "",                         /* 指定在目标为 React JSX 时用于片段（fragments）的 JSX 片段引用，例如 'React.Fragment' 或 'Fragment'。 */
    // "jsxImportSource": "",                            /* 指定在使用 jsx: react-jsx* 时用于导入 JSX 工厂函数的模块标识符（module specifier）。 */
    // "reactNamespace": "",                             /* 指定在目标为 react JSX 时调用 createElement 的对象。 */
    // "noLib": true,                                    /* 禁用包含任何库文件，包括默认的 lib.d.ts。 */
    // "useDefineForClassFields": true,                  /* 发出符合 ECMAScript 标准的类字段（class fields）。 */

    /* 模块 */
    "module": "esnext",                                  /* 指定生成的模块代码类型。 */
    // "rootDir": "./",                                  /* 指定源文件中的根文件夹。  */
    "moduleResolution": "node",                          /* 指定 TypeScript 如何从给定的模块标识符查找文件。 */
    // "baseUrl": "./",                                  /* 指定解析非相对模块名称时的基本目录。 */
    // "paths": {},                                      /* 指定一组条目，将导入重新映射到其他查找位置。 */
    // "rootDirs": [],                                   /* 允许在解析模块时将多个文件夹视为一个整体。 */
    // "typeRoots": [],                                  /* 指定多个文件夹，作为类似于 ./node_modules/@types 的行为。*/
    // "types": [],                                      /* 指定要包含的类型包名称，而无需在源文件中引用它们。这意味着您可以在配置文件（tsconfig.json）中列出需要自动包含类型声明的包名，而不必在代码中显式引用它们。 */
    // "allowUmdGlobalAccess": true,                     /* 允许从模块中访问 UMD（Universal Module Definition）全局变量。 */
    // "resolveJsonModule": true,                        /* 启用导入 .json 文件。 */
    // "noResolve": true,                                /* 禁止 import、require 或 <reference> 语句扩展 TypeScript 应该添加到项目中的文件数量。 */

    /* JavaScript 支持 */
    // "allowJs": true,                                  /* 允许 JavaScript 文件成为您程序的一部分。使用 checkJS 选项来从这些文件中获取错误信息。 */
    // "checkJs": true,                                  /* 在经过类型检查的 JavaScript 文件中启用错误报告。 */
    // "maxNodeModuleJsDepth": 1,                        /* 指定用于检查 node_modules 中 JavaScript 文件的最大文件夹深度。该选项仅在 allowJs 设置为 true 时有效。 */

    /* 输出 */
    // "declaration": true,                              /* 从 TypeScript 和 JavaScript 文件中生成 .d.ts 类型声明文件。 */
    // "declarationMap": true,                           /* 为 .d.ts 类型声明文件创建源映射文件。 */
    // "emitDeclarationOnly": true,                      /* 只输出 .d.ts 类型声明文件，而不输出 JavaScript 文件。 */
    // "sourceMap": true,                                /* 为生成的 JavaScript 文件创建源映射文件。 */
    // "outFile": "index.d.ts",                          /* 指定一个文件，将所有输出捆绑到一个 JavaScript 文件中。 如果“declaration”为 true，则还指定一个捆绑所有 .d.ts 输出的文件。 */
    // "outDir": "dist",                                 /* 指定所有生成的输出文件的输出文件夹。 */
    // "removeComments": true,                              /* 禁用输出注释。*/
    // "noEmit": true,                                   /* 禁用编译输出文件。 */
    // "importHelpers": true,                            /* 允许在整个项目中只导入一次来自 tslib 的辅助函数，而不是每个文件都包含它们。 */
    // "importsNotUsedAsValues": "remove",               /* 指定用于只用于类型的导入的发出/检查行为。 */
    // "downlevelIteration": true,                       /* 发出更符合规范的、但冗长且性能较差的 JavaScript 代码用于迭代。*/
    // "sourceRoot": "",                                 /* 指定调试器查找引用源代码的根路径。 */
    // "mapRoot": "",                                    /* 指定调试器应该定位映射文件的位置，而不是生成的位置。 */
    // "inlineSourceMap": true,                          /* 在生成的 JavaScript 文件内部包含源映射文件。*/
    // "inlineSources": true,                            /* 在生成的 JavaScript 文件内部的源映射中包含源代码。 */
    // "emitBOM": true,                                  /* 在输出文件的开头发出 UTF-8 字节顺序标记 (BOM)。 */
    // "newLine": "crlf",                                /* 设置发出文件时的换行符。 */
    // "stripInternal": true,                            /* 禁止发出带有 @internal 的 JSDoc 注释的声明。 */
    // "noEmitHelpers": true,                            /* 禁用在编译输出中生成自定义的辅助函数，例如 __extends。 */
    // "noEmitOnError": true,                            /* 如果报告了任何类型检查错误，则禁止发出文件。 */
    // "preserveConstEnums": true,                       /* 禁止在生成的代码中擦除 const enum 声明。 */
    // "declarationDir": "types",                        /* 指定生成的声明文件的输出目录。 */

    /* 互操作性约束 */
    // "isolatedModules": true,                          /* 确保每个文件可以安全地进行转译，而不依赖于其他导入。 */
    // "allowSyntheticDefaultImports": true,             /* 允许在模块没有默认导出时使用 'import x from y' 的语法。 */
    "esModuleInterop": true,                             /* 发出额外的 JavaScript 以简化对导入 CommonJS 模块的支持。 这会启用“allowSyntheticDefaultImports”以实现类型兼容性。*/
    // "preserveSymlinks": true,                         /* 禁用将符号链接解析到其真实路径。 这与节点中的相同标志相关。 */
    "forceConsistentCasingInFileNames": true,            /* Ensure that casing is correct in imports. */

    /* Type Checking */
    "strict": true,                                      /* Enable all strict type-checking options. */
    // "noImplicitAny": true,                            /* Enable error reporting for expressions and declarations with an implied `any` type.. */
    // "strictNullChecks": true,                         /* When type checking, take into account `null` and `undefined`. */
    // "strictFunctionTypes": true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
    // "strictBindCallApply": true,                      /* Check that the arguments for `bind`, `call`, and `apply` methods match the original function. */
    // "strictPropertyInitialization": true,             /* Check for class properties that are declared but not set in the constructor. */
    // "noImplicitThis": true,                           /* Enable error reporting when `this` is given the type `any`. */
    // "useUnknownInCatchVariables": true,               /* Type catch clause variables as 'unknown' instead of 'any'. */
    // "alwaysStrict": true,                             /* Ensure 'use strict' is always emitted. */
    // "noUnusedLocals": true,                           /* Enable error reporting when a local variables aren't read. */
    // "noUnusedParameters": true,                       /* Raise an error when a function parameter isn't read */
    // "exactOptionalPropertyTypes": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */
    // "noImplicitReturns": true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */
    // "noFallthroughCasesInSwitch": true,               /* Enable error reporting for fallthrough cases in switch statements. */
    // "noUncheckedIndexedAccess": true,                 /* Include 'undefined' in index signature results */
    // "noImplicitOverride": true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */
    // "noPropertyAccessFromIndexSignature": true,       /* Enforces using indexed accessors for keys declared using an indexed type */
    // "allowUnusedLabels": true,                        /* Disable error reporting for unused labels. */
    // "allowUnreachableCode": true,                     /* Disable error reporting for unreachable code. */

    /* Completeness */
    // "skipDefaultLibCheck": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */
    "skipLibCheck": true                                 /* Skip type checking all .d.ts files. */
  },
  "include": ["src/**/*", "rollup.config.ts","typings.d.ts","jest.config.ts"],
  "exclude": ["node_modules", "dist"]
}
